//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
// Parameters:
//
float4 AmbientColor : register(c1);
float4 PSLightColor[4] : register(c2);
float4 Toggles : register(c7);
float4 TESR_SkinData : register(c8);
float4 TESR_SkinColor : register(c9);
float4 TESR_ShadowData : register(c10);
float4 TESR_ShadowLightPosition[4] : register(c11);
float4 TESR_ShadowCubeMapBlend : register(c15);

sampler2D BaseMap : register(s0);
sampler2D NormalMap : register(s1);
sampler2D FaceGenMap0 : register(s2);
sampler2D FaceGenMap1 : register(s3);
sampler2D AttenuationMap : register(s5);
samplerCUBE TESR_ShadowCubeMapBuffer0 : register(s8) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; ADDRESSW = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
samplerCUBE TESR_ShadowCubeMapBuffer1 : register(s9) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; ADDRESSW = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };

//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   AmbientColor   const_1       1
//   PSLightColor[0]   const_2        1
//   PSLightColor[1]   const_3        1
//   Toggles        const_7       1
//   BaseMap        texture_0       1
//   NormalMap      texture_1       1
//   FaceGenMap0    texture_2       1
//   FaceGenMap1    texture_3       1
//   AttenuationMap texture_5       1
//


// Structures:

struct VS_OUTPUT {
    float2 BaseUV : TEXCOORD0;
    float3 Light0Dir : TEXCOORD1_centroid;
    float3 Light1Dir : TEXCOORD2_centroid;
    float4 Att1UV : TEXCOORD4;
    float3 CameraDir : TEXCOORD6_centroid;
	float4 texcoord_7 : TEXCOORD7;
    float3 Color : COLOR0;
    float4 Fog : COLOR1;
};

struct PS_OUTPUT {
    float4 Color : COLOR0;
};

// Code:

#include "..\Includes\Skin.hlsl"
#include "..\Includes\ShadowCube.hlsl"

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float att6;
    float att8;
	float q4;
	float q5;
    float3 norm;
	float3 camera;
    float3 q10;
    float3 q11;
    float3 q12;
    float3 q13;
    float3 q23;
    float3 q7;
    float3 q9;
    float4 r0;
    float3 r1;
    float3 r2;
	float Shadow = 1.0f;

	if (TESR_ShadowLightPosition[0].w) Shadow *= GetLightAmountSkin(TESR_ShadowCubeMapBuffer0, IN.texcoord_7, TESR_ShadowLightPosition[0], TESR_ShadowCubeMapBlend.x);
	if (TESR_ShadowLightPosition[1].w) Shadow *= GetLightAmountSkin(TESR_ShadowCubeMapBuffer1, IN.texcoord_7, TESR_ShadowLightPosition[1], TESR_ShadowCubeMapBlend.y);
    norm = normalize(expand(tex2D(NormalMap, IN.BaseUV.xy).xyz));
    r2 = tex2D(FaceGenMap1, IN.BaseUV.xy).rgb;
    r1 = tex2D(FaceGenMap0, IN.BaseUV.xy).rgb;
    r0 = tex2D(BaseMap, IN.BaseUV.xy);
	att6 = tex2D(AttenuationMap, IN.Att1UV.xy).x;
    att8 = tex2D(AttenuationMap, IN.Att1UV.zw).x;
	q23 = 2 * ((2 * r2) * (expand(r1) + r0.xyz));
	camera = normalize(IN.CameraDir.xyz);
    q4 = 1 - shade(norm, camera);
    q5 = q4 * sqr(q4);
	q9 = (shade(norm,           IN.Light0Dir.xyz ) * PSLightColor[0].rgb) + ((q5 * PSLightColor[0].rgb) * 0.5);
    q7 = (shade(norm, normalize(IN.Light1Dir.xyz)) * PSLightColor[1].rgb) + ((q5 * PSLightColor[1].rgb) * 0.5);
    
    q9 = Skin(q9, PSLightColor[0].rgb, camera, IN.Light0Dir.xyz, norm);
    q7 = Skin(q7, PSLightColor[1].rgb, camera, IN.Light1Dir.xyz, norm);
	
    q10 = max(Shadow * ((saturate(1 - att6 - att8) * q7) + q9) + AmbientColor.rgb, 0);
    q11 = (Toggles.x <= 0.0 ? q23 : (q23 * IN.Color.rgb));
    q12 = q10 * q11;
    q13 = (Toggles.y <= 0.0 ? q12 : ((IN.Fog.a * (IN.Fog.rgb - (q11 * q10))) + q12));
    OUT.Color.a = r0.w * AmbientColor.a;
    OUT.Color.rgb = q13;

    return OUT;
};

// approximately 52 instruction slots used (6 texture, 46 arithmetic)
