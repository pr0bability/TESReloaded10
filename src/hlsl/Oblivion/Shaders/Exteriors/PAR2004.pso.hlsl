//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
// Parameters:

float4 AmbientColor : register(c1);
float4 PSLightColor[4] : register(c2);
float4 Toggles : register(c7);
float4 TESR_ShadowData : register(c8);
float4 TESR_ParallaxData : register(c9);

sampler2D BaseMap : register(s0);
sampler2D NormalMap : register(s1);
sampler2D AttenuationMap : register(s5);
sampler2D TESR_ShadowMapBufferNear : register(s6) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s7) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };

// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   AmbientColor   const_1       1
//   PSLightColor[0]   const_2        1
//   PSLightColor[1]   const_3        1
//   Toggles        const_7       1
//   BaseMap        texture_0       1
//   NormalMap      texture_1       1
//   AttenuationMap texture_5       1
//


// Structures:

struct VS_INPUT {
    float2 BaseUV : TEXCOORD0;
    float3 texcoord_1 : TEXCOORD1_centroid;
    float3 texcoord_2 : TEXCOORD2_centroid;
    float4 texcoord_4 : TEXCOORD4;
	float4 texcoord_5 : TEXCOORD5;
    float3 texcoord_6 : TEXCOORD6_centroid;
	float4 texcoord_7 : TEXCOORD7;
    float3 LCOLOR_0 : COLOR0;
    float4 LCOLOR_1 : COLOR1;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
};

#include "..\Includes\PAR.hlsl"
#include "..\Includes\Shadow.hlsl"

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	uvtile(w)		(((w) * 0.04) - 0.02)
#define	shades(n, l)	saturate(dot(n, l))

    float1 att0;
    float1 att1;
    float3 noxel3;
    float3 q10;
    float3 q4;
    float3 q5;
    float3 q6;
    float3 q8;
    float3 q9;
    float4 r0;
    float2 uv;
	
    uv.xy = ParallaxMapping(IN.BaseUV, IN.texcoord_6);
    r0.xyzw = tex2D(BaseMap, uv.xy);
	noxel3.xyz = tex2D(NormalMap, uv.xy).xyz;
    att1.x = tex2D(AttenuationMap, IN.texcoord_4.zw).x;
    att0.x = tex2D(AttenuationMap, IN.texcoord_4.xy).x;
    q4.xyz = normalize(expand(noxel3.xyz));
    q5.xyz = saturate((1 - att0.x) - att1.x) * (shades(q4.xyz, normalize(IN.texcoord_2.xyz)) * PSLightColor[1].rgb);
    q8.xyz = (Toggles.x <= 0.0 ? r0.xyz : (r0.xyz * IN.LCOLOR_0.xyz));
    q6.xyz = (GetLightAmount(IN.texcoord_5, IN.texcoord_7) * shades(q4.xyz, IN.texcoord_1.xyz) * PSLightColor[0].rgb + q5.xyz) + AmbientColor.rgb;
    q9.xyz = max(q6.xyz, 0) * q8.xyz;
    q10.xyz = (Toggles.y <= 0.0 ? q9.xyz : ((IN.LCOLOR_1.w * (IN.LCOLOR_1.xyz - q9.xyz)) + q9.xyz));
    OUT.color_0.a = AmbientColor.a;
    OUT.color_0.rgb = q10.xyz;
    return OUT;
	
};

// approximately 37 instruction slots used (5 texture, 32 arithmetic)