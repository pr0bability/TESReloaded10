//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
// Parameters:
//
float4 AmbientColor : register(c1);
float4 PSLightColor[4] : register(c2);
float4 TESR_SkinData : register(c8);
float4 TESR_SkinColor : register(c9);
float4 TESR_ShadowData : register(c10);

sampler2D BaseMap : register(s0);
sampler2D NormalMap : register(s1);
sampler2D AttenuationMap : register(s4);
sampler2D TESR_ShadowMapBufferNear : register(s6) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s7) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   AmbientColor   const_1       1
//   PSLightColor[0]   const_2        1
//   PSLightColor[1]   const_3        1
//   PSLightColor[2]   const_4        1
//   BaseMap        texture_0       1
//   NormalMap      texture_1       1
//   AttenuationMap texture_4       1
//


// Structures:

struct VS_OUTPUT {
    float4 BaseUV : TEXCOORD0;
    float4 Light0Dir : TEXCOORD1_centroid;
    float3 Light1Dir : TEXCOORD2_centroid;
    float3 Light2Dir : TEXCOORD3_centroid;
    float4 Att1UV : TEXCOORD4;
    float4 texcoord_5 : TEXCOORD5;
    float3 CameraDir : TEXCOORD6_centroid;
	float4 texcoord_7 : TEXCOORD7;
};

struct PS_OUTPUT {
    float4 Color : COLOR0;
};

// Code:

#include "..\Includes\Skin.hlsl"
#include "..\Includes\Shadow.hlsl"

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)	saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    float att0;
    float att12;
    float att13;
    float att4;
	float q6;
	float q7;
    float3 norm;
	float3 camera;
    float3 q11;
    float3 q8;
    float3 q9;
    float4 r0;
    float3 r3;
	float4 Att2UV = float4(IN.BaseUV.zw, IN.Light0Dir.w, 0.5);
	
    norm = normalize(expand(tex2D(NormalMap, IN.BaseUV.xy).xyz));
    r0 = tex2D(BaseMap, IN.BaseUV.xy);
    att4 = tex2D(AttenuationMap, IN.Att1UV.xy).x;
    att12 = tex2D(AttenuationMap, IN.Att1UV.zw).x;
	att0 = tex2D(AttenuationMap, Att2UV.xy).x;
    att13 = tex2D(AttenuationMap, Att2UV.zw).x;
	camera = normalize(IN.CameraDir.xyz);
    q6 = 1 - shade(norm, camera);
    q7 = q6 * sqr(q6);
	q9  = (shade(norm,           IN.Light0Dir.xyz ) * PSLightColor[0].rgb) + ((q7 * PSLightColor[0].rgb) * 0.5);
	q8  = (shade(norm, normalize(IN.Light1Dir.xyz)) * PSLightColor[1].rgb) + ((q7 * PSLightColor[1].rgb) * 0.5);
    q11 = (shade(norm, normalize(IN.Light2Dir.xyz)) * PSLightColor[2].rgb) + ((q7 * PSLightColor[2].rgb) * 0.5);
	
    q9  = GetLightAmountSkin(IN.texcoord_5, IN.texcoord_7) * Skin(q9, PSLightColor[0].rgb, camera, IN.Light0Dir.xyz, norm);
    q8  = Skin(q8, PSLightColor[1].rgb, camera, IN.Light1Dir.xyz, norm);
    q11 = Skin(q11, PSLightColor[2].rgb, camera, IN.Light2Dir.xyz, norm);
	
    r3  = q9;
    r3 += saturate(1 - att4 - att12) * q8;
    r3 += saturate(1 - att0 - att13) * q11;

    OUT.Color.a = r0.w;
    OUT.Color.rgb = r3 + AmbientColor.rgb;

    return OUT;
};

// approximately 52 instruction slots used (6 texture, 46 arithmetic)
